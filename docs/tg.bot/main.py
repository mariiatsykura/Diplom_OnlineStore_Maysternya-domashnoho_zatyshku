import shopify
import telebot
from rapidfuzz import fuzz, process
from telebot import types
from bs4 import BeautifulSoup
import requests
from oauthlib.oauth2 import WebApplicationClient
import threading
import sqlite3 as sqlite

conn = sqlite.connect('shop_database.db', check_same_thread=False)
cursor = conn.cursor()
# Thread-local storage for the SQLite connection
thread_local = threading.local()

def get_db_connection():
    if not hasattr(thread_local, "connection"):
        thread_local.connection = sqlite.connect('shop_database.db', check_same_thread=False)
    return thread_local.connection

def get_db_cursor():
    return get_db_connection().cursor()

conn = get_db_connection()
cursor = get_db_cursor()

# Create tables if they don't exist
cursor.execute('''
CREATE TABLE IF NOT EXISTS questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    question TEXT,
    answered INTEGER DEFAULT 0,
    answer TEXT
)
''')
conn.commit()

# Initialize bot
TOKEN = '7461766827:AAHDhjJyClqVxRjsh2XX5huKAyuxnw2UYVE'
bot = telebot.TeleBot(token=TOKEN)

# Initialize Shopify API client
api_version = '2024-04'
shop_name = "homecomfortworkshop"
access_token = "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"

shop_url = f"https://{shop_name}.myshopify.com/admin/api/{api_version}"
shopify.Session.setup(api_key="", secret="")


def activate_shopify_session():
    session = shopify.Session(shop_name + ".myshopify.com", api_version, access_token)
    shopify.ShopifyResource.activate_session(session)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ–π —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω
try:
    activate_shopify_session()
    collections = shopify.CustomCollection.find()
    result = [collection.title for collection in collections]
    shop = shopify.Shop.current()
    currency = shop.currency
    all_products = shopify.Product.find()
    print(result)
except Exception as e:
    result = ["–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ–π"]
    print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

current_collection_index = 0
current_product_indices = {}
current_product_index = 0
collection_products_cache = {}

login_url = f"https://{shop_name}.myshopify.com/account/login"

admin_user_ids = [884461904, 987654321]


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    catalog_button = types.KeyboardButton("–ö–∞—Ç–∞–ª–æ–≥")
    question_button = types.KeyboardButton("FAQ üìå")
    ask_button = types.KeyboardButton("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©")
    myquestions_button = types.KeyboardButton("–ú–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")

    markup.add(catalog_button)
    markup.add(question_button, ask_button)
    markup.add(myquestions_button)

    try:
        bot.send_message(
            message.chat.id,
            f'–®–∞–Ω–æ–≤–Ω–∏–π {message.from_user.first_name},\n'
            f'<b>–í—ñ—Ç–∞—î–º–æ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ "–ú–∞–π—Å—Ç–µ—Ä–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞—Ç–∏—à–∫—É"!</b>\n'
            f'–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:',
            reply_markup=markup,
            parse_mode='html'
        )
        print("–í—ñ–¥–∫—Ä–∏—Ç–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@bot.message_handler(func=lambda message: message.text == "–ö–∞—Ç–∞–ª–æ–≥")
def catalog(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    collections_button = types.KeyboardButton("–ö–æ–ª–µ–∫—Ü—ñ—ó")
    categories_button = types.KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó")
    view_all_button = types.KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ")
    search_button = types.KeyboardButton("–ü–æ—à—É–∫ üîé")
    back_button = types.KeyboardButton("–ù–∞–∑–∞–¥ üîô")

    markup.add(collections_button, categories_button)
    markup.add(view_all_button, search_button)
    markup.add(back_button)

    try:
        bot.send_message(
            message.chat.id,
            f'–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:',
            reply_markup=markup,
            parse_mode='html'
        )
        print("–í—ñ–¥–∫—Ä–∏—Ç–æ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥—É")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id in admin_user_ids:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        view_questions_button = types.KeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
        back_button = types.KeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üîô")

        markup.add(view_questions_button, back_button)

        try:
            bot.send_message(
                message.chat.id,
                f'–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                reply_markup=markup,
                parse_mode='html'
            )
            print("–í—ñ–¥–∫—Ä–∏—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
    else:
        bot.send_message(message.chat.id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É")
def process_user_question(message):
    user_id = message.from_user.id
    username = message.from_user.username
    question_text = message.text

    cursor.execute('INSERT INTO questions (user_id, username, question) VALUES (?, ?, ?)', (user_id, username, question_text))
    conn.commit()

    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")

    # Notify admin about the new question
    for admin_id in admin_user_ids:
        bot.send_message(admin_id, f'New question from {username}:\n{question_text}')


@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
def view_questions(message):
    if message.from_user.id in admin_user_ids:
        cursor.execute('SELECT id, username, question FROM questions WHERE answered = 0')
        questions = cursor.fetchall()
        if questions:
            for q in questions:
                reply_markup = types.InlineKeyboardMarkup()
                reply_markup.add(types.InlineKeyboardButton("–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏", callback_data=f"answer_{q[0]}"))
                bot.send_message(
                    message.chat.id,
                    f'–ù–æ–º–µ—Ä ID: {q[0]}\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {q[1]}\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {q[2]}',
                    reply_markup=reply_markup
                )
        else:
            bot.send_message(message.chat.id, "–ù–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ")
    else:
        bot.send_message(message.chat.id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—é –∫–æ–º–∞–Ω–¥—É")

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def answer_question(call):
    question_id = int(call.data.split('_')[1])
    cursor.execute('SELECT username, question FROM questions WHERE id = ?', (question_id,))
    result = cursor.fetchone()
    if result:
        username, question_text = result
        bot.send_message(call.message.chat.id, f'–ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {username}:\n\n{question_text}\n\n–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:')
        bot.register_next_step_handler(call.message, lambda msg: process_answer(msg, question_id))
    else:
        bot.send_message(call.message.chat.id, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è
def process_answer(message, question_id):
    answer_text = message.text
    cursor.execute('UPDATE questions SET answered = 1, answer = ? WHERE id = ?', (answer_text, question_id))
    conn.commit()
    bot.send_message(message.chat.id, "–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")

@bot.message_handler(func=lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üîô")
def back_button(message):
    try:
        start(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")



@bot.message_handler(func=lambda message: message.text.lower() == "–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
def show_categories(message):
    try:
        activate_shopify_session()
        collections = shopify.SmartCollection.find()

        if collections:
            markup = types.InlineKeyboardMarkup()
            for collection in collections:
                collection_title = collection.title
                callback_data = f'show_smart_collection_{collection.id}'
                markup.add(types.InlineKeyboardButton(collection_title, callback_data=callback_data))
            bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)
            print("–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", [collection.title for collection in collections])
        else:
            bot.send_message(message.chat.id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.")
            print("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
    except Exception as e:
        bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('show_smart_collection_'))
def show_smart_collection_products(call):
    try:
        activate_shopify_session()
        collection_id = int(call.data.split('_')[3])
        collection = shopify.SmartCollection.find(collection_id)
        if collection:
            if collection_id not in collection_products_cache:
                collection_products_cache[collection_id] = shopify.Product.find(collection_id=collection_id)
            products = collection_products_cache[collection_id]
            if products:
                current_product_indices[call.message.chat.id] = (collection_id, 0)
                show_product(call.message.chat.id, products, 0)
                print(f"–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—ó {collection.title}: {[product.title for product in products]}")
            else:
                bot.send_message(call.message.chat.id, "–£ —Ü—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
                print("–£ —Ü—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
        else:
            bot.send_message(call.message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∫–∞–∑–∞–Ω—É –∫–æ–ª–µ–∫—Ü—ñ—é.")
            print("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∫–∞–∑–∞–Ω—É –∫–æ–ª–µ–∫—Ü—ñ—é.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "–ö–æ–ª–µ–∫—Ü—ñ—ó")
def show_collections(message):
    try:
        show_collection(message.chat.id, current_collection_index)
    except Exception as e:
        bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó: {str(e)}")
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó: {str(e)}")

def show_collection(chat_id, collection_index):
    global current_collection_index
    current_collection_index = collection_index

    collection_title = result[collection_index]
    print("–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –∫–æ–ª–µ–∫—Ü—ñ—ó")
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(" ‚¨ÖÔ∏è ", callback_data=f'prev_{collection_index}'),
        types.InlineKeyboardButton(f"{collection_index + 1} –∑ {len(result)}", callback_data='dummy_data'),
        types.InlineKeyboardButton(" ‚û°Ô∏è ", callback_data=f'next_{collection_index}')
    )
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", callback_data=f'view_{collection_index}'))

    description = "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
    image_url = None
    for collection in collections:
        if collection.title == collection_title:
            if collection.body_html:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è BeautifulSoup –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è HTML-—Ç–µ–≥—ñ–≤
                soup = BeautifulSoup(collection.body_html, 'html.parser')
                description = soup.get_text()[:500]  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–∏—à–µ —Ç–µ–∫—Å—Ç—É —Ç–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è –π–æ–≥–æ –¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤
                if hasattr(collection, 'image'):
                    image_url = collection.image.src
            break

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–∞–∑–≤–æ—é, –æ–ø–∏—Å–æ–º —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –∫–æ–ª–µ–∫—Ü—ñ—ó
    message_text = f'<b>–ö–æ–ª–µ–∫—Ü—ñ—è:</b> {collection_title}\n\n<b>–û–ø–∏—Å:</b> {description}'
    if image_url:
        bot.send_photo(chat_id, image_url, caption=message_text, parse_mode='html', reply_markup=markup)
    else:
        bot.send_message(chat_id, message_text, parse_mode='html', reply_markup=markup)

    if not description:
        bot.send_message(chat_id, "–¶—è –∫–æ–ª–µ–∫—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
        print("–ö–æ–ª–µ–∫—Ü—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('view_'))
def show_collection_products(call):
    try:
        activate_shopify_session()
        collection_index = int(call.data.split('_')[1])
        collection_title = result[collection_index]
        collection = next((c for c in collections if c.title == collection_title), None)
        if collection:
            if collection.id not in collection_products_cache:
                collection_products_cache[collection.id] = shopify.Product.find(collection_id=collection.id)
            products = collection_products_cache[collection.id]
            if products:
                current_product_indices[call.message.chat.id] = (collection.id, 0)
                show_product(call.message.chat.id, products, 0)
                print(call.message.chat.id, products, 0)
            else:
                bot.send_message(call.message.chat.id, "–£ —Ü—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
                print("–£ —Ü—ñ–π –∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
        else:
            bot.send_message(call.message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∫–∞–∑–∞–Ω—É –∫–æ–ª–µ–∫—Ü—ñ—é.")
            print("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∫–∞–∑–∞–Ω—É –∫–æ–ª–µ–∫—Ü—ñ—é.")
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        print("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ")
def show_all_products(message):
    try:
        activate_shopify_session()
        global all_products
        all_products = shopify.Product.find()
        if all_products:
            current_product_indices[message.chat.id] = ("all", 0)
            show_product(message.chat.id, all_products, 0)
        else:
            bot.send_message(message.chat.id, "–í –º–∞–≥–∞–∑–∏–Ω—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.")
            print("–í –º–∞–≥–∞–∑–∏–Ω—ñ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤")
    except Exception as e:
        bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤: {str(e)}")
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤: {str(e)}")

def show_product(chat_id, products, product_index):
    product = products[product_index]
    product_title = product.title
    product_price = product.variants[0].price
    product_image_url = product.image.src if hasattr(product, 'image') else None
    product_url = f"https://{shop_name}.myshopify.com/products/{product.handle}"

    # –°—Ç–∞—Ç—É—Å –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
    available = any(variant.inventory_quantity > 0 for variant in product.variants)
    availability_status = "–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ" if available else "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"

    # –í–∞—Ä—ñ–∞–Ω—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—É
    variants = product.variants
    variant_info = "\n".join([f"{variant.title}: {variant.inventory_quantity} —à—Ç." for variant in variants])

    message_text = (
        f'<b>{product_title}</b>\n'
        f'–¶—ñ–Ω–∞: {product_price} {currency}\n'
        f'–°—Ç–∞—Ç—É—Å: {availability_status}\n\n'
        f'<b>–í–∞—Ä—ñ–∞–Ω—Ç–∏:</b>\n{variant_info}'
    )

    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton(" ‚¨ÖÔ∏è ", callback_data=f'product_prev_{product_index}'),
        types.InlineKeyboardButton(f"{product_index + 1} –∑ {len(products)}", callback_data='dummy_data'),
        types.InlineKeyboardButton(" ‚û°Ô∏è ", callback_data=f'product_next_{product_index}')
    )
    markup.row(types.InlineKeyboardButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ üåê", url=product_url))

    if product_image_url:
        bot.send_photo(chat_id, product_image_url, caption=message_text, parse_mode='html', reply_markup=markup)
    else:
        bot.send_message(chat_id, message_text, parse_mode='html', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith(('product_prev_', 'product_next_')))
def handle_product_pagination(call):
    try:
        chat_id = call.message.chat.id
        if chat_id not in current_product_indices:
            return

        _, product_index = current_product_indices[chat_id]
        products = None

        if current_product_indices[chat_id][0] == "all":
            products = all_products
        else:
            collection_id = current_product_indices[chat_id][0]
            products = collection_products_cache.get(collection_id, [])

        if len(products) == 0:
            return

        if call.data.startswith('product_prev_'):
            product_index = (product_index - 1) % len(products)
        else:
            product_index = (product_index + 1) % len(products)

        current_product_indices[chat_id] = (current_product_indices[chat_id][0], product_index)
        bot.delete_message(chat_id, call.message.message_id)
        show_product(chat_id, products, product_index)
    except Exception as e:
        bot.send_message(chat_id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith(('prev_', 'next_')))
def handle_pagination(call):
    global current_collection_index

    collection_index = int(call.data.split('_')[1])
    total_collections = len(result)

    try:
        if call.data.startswith('prev_'):
            collection_index -= 1
            if collection_index < 0:
                collection_index = total_collections - 1
        elif call.data.startswith('next_'):
            collection_index += 1
            if collection_index >= total_collections:
                collection_index = 0

        current_collection_index = collection_index
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_collection(call.message.chat.id, collection_index)
    except Exception as e:
        bot.send_message(call.message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó: {str(e)}")
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó: {str(e)}")
@bot.message_handler(func=lambda message: message.text == "–ü–æ—à—É–∫ üîé")
def search(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç:")
    bot.register_next_step_handler(msg, process_search_query)

def process_search_query(message):
    global search_query
    search_query = message.text

    try:
        activate_shopify_session()
        search_results = search_products_in_shop(search_query)

        if search_results:
            current_product_indices[message.chat.id] = 0
            show_product(message.chat.id, search_results, 0)
        else:
            bot.send_message(message.chat.id, "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É: {str(e)}")

def search_products_in_shop(query):
    results = []
    for product in all_products:
        product_title = product.title
        ratio = fuzz.partial_ratio(query.lower(), product_title.lower())
        if ratio > 80:  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥ —Å—Ö–æ–∂–æ—Å—Ç—ñ
            results.append(product)
    return results
@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ üîô")
def back_to_main_menu(message):
    try:
        start(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")



@bot.message_handler(func=lambda message: message.text == "FAQ üìå")
def faq(message):
    faq_markup = types.InlineKeyboardMarkup()
    faq_markup.add(types.InlineKeyboardButton("–Ø–∫—ñ —Å–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏ –≤–∏ –ø—Ä–∏–π–º–∞—î—Ç–µ?", callback_data="payment_methods"))
    faq_markup.add(types.InlineKeyboardButton("–Ø–∫—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ?", callback_data="delivery_options"))
    faq_markup.add(types.InlineKeyboardButton("–Ø–∫ —è –º–æ–∂—É –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ —Å–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?", callback_data="track_order"))
    faq_markup.add(types.InlineKeyboardButton("–Ø–∫–∞ –≤–∞—à–∞ –ø–æ–ª—ñ—Ç–∏–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è?", callback_data="return_policy"))
    faq_markup.add(types.InlineKeyboardButton("–Ø–∫ —è –º–æ–∂—É –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏?", callback_data="contact_us"))

    try:
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=faq_markup)
        print("–í—ñ–¥–∫—Ä–∏—Ç–æ FAQ –º–µ–Ω—é")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ["payment_methods", "delivery_options", "track_order", "return_policy", "contact_us"])
def answer_faq(call):
    faq_responses = {
        "payment_methods": "–ú–∏ –ø—Ä–∏–π–º–∞—î–º–æ –∫—Ä–µ–¥–∏—Ç–Ω—ñ –∫–∞—Ä—Ç–∫–∏, –¥–µ–±–µ—Ç–æ–≤—ñ –∫–∞—Ä—Ç–∫–∏, PayPal —Ç–∞ Apple Pay.",
        "delivery_options": "–ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —Ç–∞ –µ–∫—Å–ø—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫—É. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–π–º–∞—î 3-5 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤, –∞ –µ–∫—Å–ø—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∞ - 1-2 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ.",
        "track_order": "–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º https://www.17track.net/en, –∞–±–æ —á–µ—Ä–µ–∑ —Ç—Ä–µ–∫–µ—Ä —É –∫–Ω–æ–ø—Ü—ñ *–¥–æ–ø–æ–º–æ–≥–∞* –Ω–∞—à–æ–≥–æ —Å–∞–π—Ç—É",
        "return_policy": "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ç–æ–≤–∞—Ä –ø—Ä–æ—Ç—è–≥–æ–º 30 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è. –¢–æ–≤–∞—Ä –º–∞—î –±—É—Ç–∏ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ.",
        "contact_us": "–í–∏ –º–æ–∂–µ—Ç–µ –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –Ω–∞–º–∏ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ *–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©*"
    }

    response = faq_responses.get(call.data, "–í–∏–±–∞—á—Ç–µ, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    bot.send_message(call.message.chat.id, response)


# Handling user questions
@bot.message_handler(func=lambda message: message.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì©")
def ask_question(message):
    msg = bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:")
    bot.register_next_step_handler(msg, process_user_question)

def process_user_question(message):
    user_id = message.from_user.id
    username = message.from_user.username
    question_text = message.text

    cursor.execute('INSERT INTO questions (user_id, username, question) VALUES (?, ?, ?)', (user_id, username, question_text))
    conn.commit()

    bot.send_message(message.chat.id, "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")

    # Notify admin about the new question
    for admin_id in admin_user_ids:
        bot.send_message(admin_id, f'New question from {username}:\n{question_text}')

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@bot.message_handler(func=lambda message: message.text == "–ú–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
def my_questions_handler(message):
    user_id = message.from_user.id
    cursor.execute('SELECT question, answered, answer FROM questions WHERE user_id = ?', (user_id,))
    user_questions = cursor.fetchall()

    if user_questions:
        for question, answered, answer_text in user_questions:
            if answered:
                bot.send_message(message.chat.id, f"–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:\n\n{question}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å:\n\n{answer_text}")
            else:
                bot.send_message(message.chat.id, f"–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:\n\n{question}\n\n–ú–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")
    else:
        bot.send_message(message.chat.id, "–í–∏ —â–µ –Ω–µ –∑–∞–¥–∞–≤–∞–ª–∏ –ø–∏—Ç–∞–Ω—å")
# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ—Å–ø—ñ–≤–ø–∞–¥–∞—é—á–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(func=lambda message: True)
def handle_all_message(message):
    bot.send_message(message.chat.id, "–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é –≤–∞—à–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º.")


if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

